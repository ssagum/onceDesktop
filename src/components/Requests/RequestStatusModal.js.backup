import React, { useState, useEffect, useRef } from "react";
import ModalTemplate from "../common/ModalTemplate";
import { cancel } from "../../assets";
import {
  DndContext,
  MouseSensor,
  TouchSensor,
  useSensor,
  useSensors,
  closestCorners,
  DragOverlay,
  pointerWithin,
  rectIntersection,
  useDndMonitor,
  MeasuringStrategy,
} from "@dnd-kit/core";
import {
  SortableContext,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { useDroppable } from "@dnd-kit/core";
import {
  collection,
  query,
  orderBy,
  where,
  onSnapshot,
  doc,
  updateDoc,
  getDocs,
  addDoc,
  serverTimestamp,
} from "firebase/firestore";
import { db } from "../../firebase";
import { useUserLevel } from "../../utils/UserLevelContext";
import VacationModal from "../call/VacationModal";
import StockRequestModal from "../Warehouse/StockRequestModal";
import RequestModal from "../Home/RequestModal";
import { format } from "date-fns";
import ChipText from "../common/ChipText";
import { useToast } from "../../contexts/ToastContext";
import { useFirestore } from "../../hooks/useFirestore";
import VendorModal from "../Warehouse/VendorModal";
import {
  isHospitalOwner,
  isAdministrativeManager,
  canApproveStockRequest,
  canApproveVacation,
  canOrderStock,
  canManageRequest,
} from "../../utils/permissionUtils";

// 애니메이션 스타일 추가
const styles = `
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in-up {
    animation: fadeInUp 0.3s ease-out forwards;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  .animate-fade-in {
    animation: fadeIn 0.2s ease-out forwards;
  }
  
  .hover-scale {
    transition: transform 0.2s;
  }
  
  .hover-scale:hover {
    transform: scale(1.02);
    z-index: 10;
  }
`;

// 아이템 상세 모달 컴포넌트
const ItemDetailModal = ({
  isVisible,
  setIsVisible,
  item,
  itemType,
  isAdmin,
  onStatusChange,
}) => {
  const [currentStatus, setCurrentStatus] = useState("");
  const { showToast } = useToast();
  const [reason, setReason] = useState("");
  const [selectedStatus, setSelectedStatus] = useState(null);
  const { userLevelData, currentUser } = useUserLevel();

  // 모달이 열릴 때 현재 아이템 상태 설정
  useEffect(() => {
    if (item && isVisible) {
      setCurrentStatus(item.status || "대기중");
      setReason("");
      setSelectedStatus(null);
    }
  }, [item, isVisible]);

  // 상태가 없는 경우 처리
  if (!item) return null;

  // 권한 체크 함수 추가
  const checkPermission = (newStatus) => {
    // 승인/반려 권한 체크
    if (newStatus === "승인됨" || newStatus === "반려됨") {
      if (itemType === "vacation") {
        if (!canApproveVacation(userLevelData, currentUser)) {
          showToast("휴가 신청을 승인/반려할 권한이 없습니다.", "error");
          return false;
        }
      } else if (itemType === "stock") {
        if (!canApproveStockRequest(userLevelData, currentUser)) {
          showToast("비품 신청을 승인/반려할 권한이 없습니다.", "error");
          return false;
        }
      } else if (itemType === "request") {
        if (!canManageRequest(userLevelData, currentUser)) {
          showToast("요청을 승인/반려할 권한이 없습니다.", "error");
          return false;
        }
      }
    }
    // 주문 관련 상태 체크 (비품에만 해당)
    else if (
      ["주문 필요", "주문 완료", "입고 완료"].includes(newStatus) &&
      itemType === "stock"
    ) {
      if (!canOrderStock(userLevelData, currentUser)) {
        showToast("비품 주문 상태를 변경할 권한이 없습니다.", "error");
        return false;
      }
    }

    return true;
  };

  // 아이템 유형별 제목 설정
  const getTitle = () => {
    switch (itemType) {
      case "vacation":
        return getVacationTitle(item);
      case "stock":
        return item.itemName;
      case "request":
        return item.title || "요청";
      default:
        return "상세 정보";
    }
  };

  // 상태 선택 핸들러
  const handleStatusSelect = (newStatus) => {
    // 권한 체크 먼저 수행
    if (!checkPermission(newStatus)) {
      return;
    }

    // 현재 상태와 같은 상태는 선택 불가능하도록 함
    if (newStatus === item.status) {
      showToast(
        `이미 '${newStatus}' 상태입니다. 다른 상태를 선택해주세요.`,
        "warning"
      );
      return;
    }

    // 상태가 같으면 선택 취소, 다르면 상태 선택 및 기본 사유 설정
    if (selectedStatus === newStatus) {
      setSelectedStatus(null);
      setReason("");
    } else {
      setSelectedStatus(newStatus);
      // 기본 사유 설정 (기존 코드 유지)
      switch (newStatus) {
        case "승인됨":
          switch (itemType) {
            case "vacation":
              setReason("검토 후 승인합니다.");
              break;
            case "stock":
              setReason("비품 신청을 승인합니다.");
              break;
            case "request":
              setReason("요청 사항을 확인하고 승인합니다.");
              break;
            default:
              setReason("승인합니다.");
          }
          break;
        case "반려됨":
          switch (itemType) {
            case "vacation":
              setReason("추가 검토가 필요하여 반려합니다.");
              break;
            case "stock":
              setReason("재고 상황을 고려하여 반려합니다.");
              break;
            case "request":
              setReason("검토 후 반려합니다.");
              break;
            default:
              setReason("반려합니다.");
          }
          break;
        case "장바구니":
          setReason("장바구니에 추가합니다.");
          break;
        case "대기중":
          setReason("대기 상태로 변경합니다.");
          break;
        case "주문완료":
          setReason("주문 처리를 완료합니다.");
          break;
        case "완료됨":
          setReason("처리가 완료되었습니다.");
          break;
        case "입고 완료":
          setReason("입고 처리를 완료합니다.");
          break;
        default:
          setReason(`${newStatus} 상태로 변경합니다.`);
      }
    }
  };

  // 사유 입력 핸들러
  const handleReasonChange = (e) => {
    setReason(e.target.value);
  };

  // 상태 변경 확인 핸들러
  const handleStatusConfirm = () => {
    if (!selectedStatus) return; // 선택된 상태가 있어야 함

    if (onStatusChange && reason.trim()) {
      onStatusChange(item.id, selectedStatus, reason);
      showToast(`상태가 '${selectedStatus}'(으)로 변경되었습니다.`, "success");
      setIsVisible(false);
    } else {
      showToast("사유를 입력해주세요.", "error");
    }
  };

  // 아이템 유형별 상세 정보 렌더링
  const renderDetails = () => {
    switch (itemType) {
      case "vacation":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="text-sm font-medium text-gray-500">신청 유형</h3>
                <p className="text-base">{item.vacationType || "휴가"}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">신청자</h3>
                <p className="text-base">{item.userName || "미정"}</p>
              </div>
              <div className="col-span-2">
                <h3 className="text-sm font-medium text-gray-500">기간</h3>
                <p className="text-base">
                  {item.startDate} {item.startTime} ~ {item.endDate}{" "}
                  {item.endTime}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">휴가 일수</h3>
                <p className="text-base">{item.days || 0}일</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">현재 상태</h3>
                <p className={`text-base ${getStatusColor(item.status)}`}>
                  {item.status}
                </p>
              </div>
              <div className="col-span-2">
                <h3 className="text-sm font-medium text-gray-500">사유</h3>
                <p className="text-base bg-gray-50 p-2 rounded-md">
                  {item.reason || "사유 없음"}
                </p>
              </div>
              {item.approvalReason && (
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">
                    승인/반려 사유
                  </h3>
                  <p className="text-base bg-gray-50 p-2 rounded-md">
                    {item.approvalReason}
                  </p>
                </div>
              )}
            </div>
          </div>
        );
      case "stock":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="text-sm font-medium text-gray-500">분류</h3>
                <p className="text-base">{item.category || "미분류"}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">신청자</h3>
                <p className="text-base">{item.requestedByName || "미정"}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">수량</h3>
                <p className="text-base">
                  {item.quantity || 0} {item.measure || "개"}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">단가</h3>
                <p className="text-base">
                  {item.price ? `${item.price.toLocaleString()}원` : "-"}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">거래처</h3>
                <p className="text-base">{item.vendor || "-"}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">현재 상태</h3>
                <p className={`text-base ${getStatusColor(item.status)}`}>
                  {item.status}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">신청 유형</h3>
                <p className="text-base">
                  {item.requestType === "auto" ? (
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      자동 신청
                    </span>
                  ) : item.requestType === "manual" ? (
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      수동 신청
                    </span>
                  ) : (
                    "-"
                  )}
                </p>
              </div>
              <div className="col-span-2">
                <h3 className="text-sm font-medium text-gray-500">신청 사유</h3>
                <p className="text-base bg-gray-50 p-2 rounded-md">
                  {item.requestReason || "사유 없음"}
                </p>
              </div>
              {item.approvalReason && (
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">
                    승인/반려 사유
                  </h3>
                  <p className="text-base bg-gray-50 p-2 rounded-md">
                    {item.approvalReason}
                  </p>
                </div>
              )}
            </div>
          </div>
        );
      case "request":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="text-sm font-medium text-gray-500">중요도</h3>
                <p className="text-base">{item.priority || "중"}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">발신자</h3>
                <p className="text-base">{item.senderPeople?.[0] || "익명"}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">수신자</h3>
                <p className="text-base">
                  {item.receiverPeople?.length || 0}명
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">현재 상태</h3>
                <p className={`text-base ${getStatusColor(item.status)}`}>
                  {item.status}
                </p>
              </div>
              <div className="col-span-2">
                <h3 className="text-sm font-medium text-gray-500">내용</h3>
                <p className="text-base bg-gray-50 p-2 rounded-md">
                  {item.message || "내용 없음"}
                </p>
              </div>
              {item.approvalReason && (
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">
                    승인/반려 사유
                  </h3>
                  <p className="text-base bg-gray-50 p-2 rounded-md">
                    {item.approvalReason}
                  </p>
                </div>
              )}
            </div>
          </div>
        );
      default:
        return <div>상세 정보가 없습니다.</div>;
    }
  };

  // 상태에 따른 텍스트 색상 반환
  const getStatusColor = (status) => {
    switch (status) {
      case "반려됨":
        return "text-red-600";
      case "승인됨":
        return "text-blue-600";
      case "대기중":
        return "text-yellow-600";
      case "완료됨":
      case "주문완료":
      case "입고 완료":
        return "text-green-600";
      default:
        return "text-gray-600";
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-[550px] max-h-[80vh] overflow-y-auto p-6 animate-fade-in-up">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold text-gray-800">{getTitle()}</h2>
          <button
            onClick={() => setIsVisible(false)}
            className="text-gray-500 hover:text-gray-700 transition-colors"
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        {renderDetails()}

        <div className="mt-8 border-t pt-4">
          <h3 className="text-sm font-medium text-gray-500 mb-2">상태 변경</h3>
          <div className="flex flex-wrap gap-2">
            {STATUS_FLOW[itemType]?.map((status) => (
              <button
                key={status}
                onClick={() => handleStatusSelect(status)}
                className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                  selectedStatus === status
                    ? status === "반려됨"
                      ? "bg-red-100 border-2 border-red-400 text-red-700"
                      : status === "승인됨"
                      ? "bg-blue-100 border-2 border-blue-400 text-blue-700"
                      : status === "대기중"
                      ? "bg-yellow-100 border-2 border-yellow-400 text-yellow-700"
                      : status === "장바구니"
                      ? "bg-purple-100 border-2 border-purple-400 text-purple-700"
                      : status === "주문완료" ||
                        status === "완료됨" ||
                        status === "입고 완료"
                      ? "bg-green-100 border-2 border-green-400 text-green-700"
                      : "bg-gray-100 border-2 border-gray-300 text-gray-700"
                    : status === "반려됨"
                    ? "bg-white border border-red-300 text-red-600 hover:bg-red-50"
                    : status === "승인됨"
                    ? "bg-white border border-blue-300 text-blue-600 hover:bg-blue-50"
                    : status === "대기중"
                    ? "bg-white border border-yellow-300 text-yellow-600 hover:bg-yellow-50"
                    : status === "장바구니"
                    ? "bg-white border border-purple-300 text-purple-600 hover:bg-purple-50"
                    : status === "주문완료" ||
                      status === "완료됨" ||
                      status === "입고 완료"
                    ? "bg-white border border-green-300 text-green-600 hover:bg-green-50"
                    : "bg-white border border-gray-300 text-gray-600 hover:bg-gray-50"
                }`}
              >
                {status}
              </button>
            ))}
          </div>

          {selectedStatus && (
            <div className="mt-4 border-t pt-4 animate-fade-in">
              <div className="flex items-center mb-2">
                <h3 className="text-sm font-medium text-gray-500">
                  변경 사유 입력
                </h3>
                <span className="text-xs text-gray-400 ml-2">(필수)</span>
              </div>
              <textarea
                value={reason}
                onChange={handleReasonChange}
                placeholder="사유를 입력해주세요..."
                className="w-full border border-gray-300 rounded-md px-4 py-2 h-24 resize-none focus:outline-none focus:ring-2 focus:ring-onceBlue focus:border-transparent mb-2"
              />
              <div className="text-xs text-gray-500 mb-4">
                * 상태 변경 시 사유가 필수적으로 기록됩니다.
              </div>
            </div>
          )}
        </div>

        <div className="mt-6 flex justify-end space-x-3">
          <button
            onClick={() => setIsVisible(false)}
            className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 transition-colors text-sm font-medium"
          >
            닫기
          </button>
          {selectedStatus && reason.trim() && (
            <button
              onClick={handleStatusConfirm}
              className="bg-onceBlue text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors text-sm font-medium shadow-sm"
            >
              저장
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

// 사유 입력 모달 컴포넌트
const ReasonInputModal = ({
  isVisible,
  setIsVisible,
  onSubmit,
  actionType,
  itemType,
}) => {
  const [reason, setReason] = useState("");
  const reasonRef = useRef(null);

  // 모달이 열릴 때 입력 필드에 포커스
  useEffect(() => {
    if (isVisible && reasonRef.current) {
      reasonRef.current.focus();

      // 액션 타입에 따라 기본 사유 설정
      const defaultReason = getDefaultReason();
      setReason(defaultReason);
    }
  }, [isVisible, actionType, itemType]);

  // 사유 입력 핸들러
  const handleReasonChange = (e) => {
    setReason(e.target.value);
  };

  // 모달 닫을 때 상태 초기화
  const handleClose = () => {
    setReason("");
    setIsVisible(false);
  };

  // 확인 버튼 클릭 핸들러
  const handleSubmit = () => {
    if (onSubmit && reason.trim()) {
      onSubmit(reason);
    }
    handleClose();
  };

  // 키 다운 이벤트 핸들러 - 엔터 키 처리
  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault(); // 기본 엔터 동작 방지
      if (reason.trim()) {
        handleSubmit();
      }
    }
  };

  // 액션 타입에 따른 타이틀 설정
  const getActionTitle = () => {
    switch (actionType) {
      case "승인됨":
        return "승인 사유";
      case "반려됨":
        return "반려 사유";
      case "장바구니":
        return "장바구니 이동 사유";
      case "대기중":
        return "대기 상태 변경 사유";
      case "주문완료":
        return "주문 완료 사유";
      case "완료됨":
        return "완료 처리 사유";
      case "입고 완료":
        return "입고 완료 사유";
      default:
        return "상태 변경 사유";
    }
  };

  // 아이템 타입에 따른 추가 설명
  const getDescription = () => {
    switch (itemType) {
      case "vacation":
        if (actionType === "반려됨") {
          return "휴가 신청을 반려하는 사유를 입력해주세요.";
        } else if (actionType === "승인됨") {
          return "휴가 신청을 승인하는 사유를 입력해주세요.";
        } else {
          return `휴가 신청을 ${actionType} 상태로 변경하는 사유를 입력해주세요.`;
        }
      case "stock":
        if (actionType === "반려됨") {
          return "비품 신청을 반려하는 사유를 입력해주세요.";
        } else if (actionType === "승인됨") {
          return "비품 신청을 승인하는 사유를 입력해주세요.";
        } else if (actionType === "장바구니") {
          return "비품 신청을 장바구니로 이동하는 사유를 입력해주세요.";
        } else if (actionType === "주문완료") {
          return "비품 주문이 완료된 사유를 입력해주세요.";
        } else if (actionType === "입고 완료") {
          return "비품 입고가 완료된 사유를 입력해주세요.";
        } else {
          return `비품 신청을 ${actionType} 상태로 변경하는 사유를 입력해주세요.`;
        }
      case "request":
        if (actionType === "반려됨") {
          return "요청을 반려하는 사유를 입력해주세요.";
        } else if (actionType === "승인됨") {
          return "요청을 승인하는 사유를 입력해주세요.";
        } else if (actionType === "완료됨") {
          return "요청이 완료된 사유를 입력해주세요.";
        } else {
          return `요청을 ${actionType} 상태로 변경하는 사유를 입력해주세요.`;
        }
      default:
        return `${actionType} 상태로 변경하는 사유를 입력해주세요.`;
    }
  };

  // 액션 타입에 따른 기본 사유 텍스트
  const getDefaultReason = () => {
    switch (actionType) {
      case "승인됨":
        switch (itemType) {
          case "vacation":
            return "검토 후 승인합니다.";
          case "stock":
            return "비품 신청을 승인합니다.";
          case "request":
            return "요청 사항을 확인하고 승인합니다.";
          default:
            return "승인합니다.";
        }
      case "반려됨":
        switch (itemType) {
          case "vacation":
            return "추가 검토가 필요하여 반려합니다.";
          case "stock":
            return "재고 상황을 고려하여 반려합니다.";
          case "request":
            return "검토 후 반려합니다.";
          default:
            return "반려합니다.";
        }
      case "장바구니":
        return "장바구니에 추가합니다.";
      case "대기중":
        return "대기 상태로 변경합니다.";
      case "주문완료":
        return "주문 처리를 완료합니다.";
      case "완료됨":
        return "처리가 완료되었습니다.";
      case "입고 완료":
        return "입고 처리를 완료합니다.";
      default:
        return `${actionType} 상태로 변경합니다.`;
    }
  };

  return (
    <div
      className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-200 ${
        isVisible ? "opacity-100" : "opacity-0 pointer-events-none"
      }`}
    >
      <div className="bg-white rounded-lg shadow-xl w-[450px] p-6 animate-fade-in-up">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-gray-800">
            {getActionTitle()}
          </h2>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-700 transition-colors"
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        <p className="text-gray-600 mb-4">{getDescription()}</p>

        <textarea
          ref={reasonRef}
          value={reason}
          onChange={handleReasonChange}
          onKeyDown={handleKeyDown}
          placeholder="사유를 입력해주세요..."
          className="w-full border border-gray-300 rounded-md px-4 py-2 h-32 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4"
        />

        <div className="flex justify-end space-x-3">
          <button
            onClick={handleClose}
            className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 transition-colors"
          >
            취소
          </button>
          <button
            onClick={handleSubmit}
            className="bg-onceBlue text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
            disabled={!reason.trim()}
          >
            확인
          </button>
        </div>
      </div>
    </div>
  );
};

// 전역 상태 변수 추가 - 동시에 여러 요소가 하이라이트되는 문제 방지
let currentHighlightedElement = null;
let globalDragState = {
  isDragging: false,
  activeId: null,
  targetStatus: null,
};

// 드래그 가능한 항목 컴포넌트
const DraggableItem = ({ id, data, type, onItemClick, isAdmin }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
    over,
  } = useSortable({
    id,
    data: {
      type: "item",
      item: data,
      itemType: type,
      id,
      parent: data.status, // 부모 상태 저장
    },
  });

  // 컴포넌트의 ref
  const itemRef = useRef(null);
  const [isBeingHoveredOver, setIsBeingHoveredOver] = useState(false);

  // DndContext에서 모니터링을 위한 훅 사용
  const dndContext = useDndMonitor({
    onDragStart() {
      // 드래그 시작 시 전역 상태 초기화
      globalDragState.isDragging = true;
      currentHighlightedElement = null;
    },
    onDragOver({ active, over }) {
      // 아이템 위에 드래그했는지 확인
      const isOverThisItem = over && over.id === id && active.id !== id;

      // 이전 상태와 다를 때만 상태 업데이트 (불필요한 리렌더링 방지)
      if (isOverThisItem !== isBeingHoveredOver) {
        setIsBeingHoveredOver(isOverThisItem);
      }

      if (isOverThisItem) {
        // 부모 드롭 영역 찾기
        const parentDropArea = itemRef.current?.closest(
          '[data-droppable="true"]'
        );

        if (parentDropArea && currentHighlightedElement !== parentDropArea) {
          // 이전에 하이라이트된 요소가 있으면 모두 제거
          if (currentHighlightedElement) {
            currentHighlightedElement.removeAttribute("data-highlight");
            currentHighlightedElement.classList.remove(
              "ring-2",
              "ring-blue-400",
              "bg-blue-50/20",
              "shadow-md",
              "scale-[1.01]",
              "z-10"
            );
          }

          // 현재 영역을 하이라이트하고 전역 참조 업데이트
          currentHighlightedElement = parentDropArea;
          parentDropArea.setAttribute("data-highlight", "true");
          parentDropArea.classList.add(
            "ring-2",
            "ring-blue-400",
            "bg-blue-50/20",
            "shadow-md",
            "scale-[1.01]",
            "z-10"
          );

          // 전역 상태 업데이트
          globalDragState.targetStatus =
            parentDropArea.getAttribute("data-status");
        }
      }
    },
    onDragEnd() {
      // 드래그 종료 시 상태 초기화
      setIsBeingHoveredOver(false);
      globalDragState.isDragging = false;
      globalDragState.targetStatus = null;

      // 하이라이트된 요소 정리
      if (currentHighlightedElement) {
        currentHighlightedElement.removeAttribute("data-highlight");
        currentHighlightedElement.classList.remove(
          "ring-2",
          "ring-blue-400",
          "bg-blue-50/20",
          "shadow-md",
          "scale-[1.01]",
          "z-10"
        );
        currentHighlightedElement = null;
      }

      // 혹시나 남아있는 다른 하이라이트된 요소들도 모두 정리
      document
        .querySelectorAll('[data-highlight="true"], [data-hovered="true"]')
        .forEach((el) => {
          el.removeAttribute("data-highlight");
          el.removeAttribute("data-hovered");
          el.classList.remove(
            "ring-2",
            "ring-blue-400",
            "bg-blue-50/20",
            "shadow-md",
            "scale-[1.01]",
            "z-10"
          );
        });
    },
    onDragCancel() {
      // 드래그 취소 시도 정리 작업 수행
      setIsBeingHoveredOver(false);
      globalDragState.isDragging = false;
      globalDragState.targetStatus = null;

      if (currentHighlightedElement) {
        currentHighlightedElement.removeAttribute("data-highlight");
        currentHighlightedElement.classList.remove(
          "ring-2",
          "ring-blue-400",
          "bg-blue-50/20",
          "shadow-md",
          "scale-[1.01]",
          "z-10"
        );
        currentHighlightedElement = null;
      }
    },
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.4 : 1,
    zIndex: isDragging ? 9999 : isBeingHoveredOver ? 30 : 1,
    pointerEvents: isDragging ? "none" : "auto",
  };

  // 날짜 포맷 간소화 (YYYY/MM/DD만 표시)
  const formatShortDate = (timestamp) => {
    if (!timestamp) return "";

    const date =
      timestamp instanceof Date
        ? timestamp
        : new Date(
            typeof timestamp === "number" ? timestamp : timestamp.seconds * 1000
          );

    return format(date, "yyyy/MM/dd");
  };

  let content;
  switch (type) {
    case "vacation":
      content = (
        <>
          <div className="font-medium text-gray-800 text-base mb-2 border-l-4 border-blue-500 pl-2">
            {getVacationTitle(data)}
          </div>

          <div className="flex items-center text-sm text-gray-700 mb-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-1 text-gray-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              />
            </svg>
            <span>
              {data.startDate} ~ {data.endDate}
            </span>
          </div>

          <div
            className="text-sm text-gray-600 mb-2 line-clamp-2"
            title={data.reason}
          >
            {data.reason}
          </div>

          <div className="flex justify-between items-center mt-1 text-xs text-gray-500 pt-1 border-t border-gray-100">
            <div className="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-3 w-3 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                />
              </svg>
              {data.userName}
            </div>
            <div>{formatShortDate(data.timestamp)}</div>
          </div>
        </>
      );
      break;
    case "stock":
      content = (
        <>
          <div className="font-medium text-gray-800 text-base mb-2 border-l-4 border-green-500 pl-2">
            {data.itemName}
          </div>

          <div className="flex items-center text-sm text-gray-700 mb-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-1 text-gray-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"
              />
            </svg>
            <span>{data.category}</span>
          </div>

          <div className="flex items-center text-sm text-gray-700 mb-2">
            {data.requestType === "auto" ? (
              <span className="px-1.5 py-0.5 text-xs bg-yellow-100 text-yellow-800 rounded-full mr-2">
                자동
              </span>
            ) : data.requestType === "manual" ? (
              <span className="px-1.5 py-0.5 text-xs bg-blue-100 text-blue-800 rounded-full mr-2">
                수동
              </span>
            ) : null}

            <span className="text-xs bg-gray-100 px-2 py-0.5 rounded-full">
              {data.department || "미지정"}
            </span>
          </div>

          {/* 수량, 단가, 총액을 같은 스타일로 한 줄에 배치 */}
          <div className="flex flex-wrap items-center gap-2 mb-2">
            <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
              수량: {data.quantity} {data.measure || "개"}
            </span>
            <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
              단가: {data.price ? data.price.toLocaleString() + "원" : "미지정"}
            </span>
            {data.price > 0 && data.quantity > 0 && (
              <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                총액: {(data.price * data.quantity).toLocaleString()}원
              </span>
            )}
          </div>

          {data.vendor && (
            <div
              className="flex items-center text-sm text-blue-600 mt-2 cursor-pointer hover:text-blue-800"
              onClick={(e) => {
                e.stopPropagation();
                handleVendorClick(data.vendor);
              }}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
                />
              </svg>
              <span className="underline">{data.vendor}</span>
            </div>
          )}

          <div className="flex justify-between items-center text-xs text-gray-500 mt-3">
            <div className="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-3 w-3 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                />
              </svg>
              {data.writer || "Unknown"}
            </div>
            <div>{formatShortDate(data.createdAt)}</div>
          </div>
        </>
      );
      break;
    case "request":
      content = (
        <>
          <div
            className="font-medium text-gray-800 text-base mb-2 border-l-4 border-purple-500 pl-2 truncate"
            title={data.title}
          >
            {data.title || "요청"}
          </div>

          <div
            className="text-sm text-gray-600 mb-2 line-clamp-2"
            title={data.message}
          >
            {data.message}
          </div>

          <div className="flex flex-wrap text-sm mb-2">
            <span className="mr-2 bg-gray-100 px-2 py-0.5 rounded-full text-xs">
              중요도: {data.priority || "중"}
            </span>
            <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
              수신자: {data.receiverPeople?.length || 0}명
            </span>
          </div>

          <div className="flex justify-between items-center mt-1 text-xs text-gray-500 pt-1 border-t border-gray-100">
            <div className="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-3 w-3 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                />
              </svg>
              {data.senderPeople?.[0] ? data.senderPeople[0] : "익명"}
            </div>
            <div>{formatShortDate(data.timestamp)}</div>
          </div>
        </>
      );
      break;
    default:
      content = <div>Unknown item type</div>;
  }

  // 이벤트 핸들러를 래핑하여 이벤트 버블링 제어
  const handleItemClick = (e) => {
    if (isDragging) return; // 드래그 중일 때는 클릭 무시
    e.stopPropagation(); // 이벤트 전파 중단
    if (onItemClick) {
      onItemClick(data);
    }
  };

  return (
    <div
      ref={(node) => {
        setNodeRef(node);
        itemRef.current = node;
      }}
      {...attributes}
      {...listeners}
      style={style}
      className={`bg-white p-3 mb-2 rounded-lg shadow-sm cursor-grab border border-gray-200 hover:shadow-md transition-all relative hover-scale ${
        isBeingHoveredOver
          ? "border-blue-500 border-2 bg-blue-50/20 shadow-md"
          : ""
      }`}
      onClick={handleItemClick}
      data-item-id={id}
      data-item-type={type}
      data-parent-status={data.status}
    >
      {content}

      {/* 아이템 위에 드래그 중일 때 드롭 대상 표시 - 크기 축소 */}
      {isBeingHoveredOver && (
        <div className="absolute inset-0 flex items-center justify-center rounded-lg bg-blue-500/5 border border-blue-300 pointer-events-none z-10"></div>
      )}
    </div>
  );
};

// 완전히 새로운 드롭 영역 컴포넌트
const DropArea = ({ id, title, items, itemType, renderItem, className }) => {
  const containerRef = useRef(null);

  // Droppable 훅 사용
  const { setNodeRef, isOver, active, over } = useDroppable({
    id,
    data: {
      type: "container",
      accepts: itemType,
      id,
      status: id,
    },
  });

  // 관리자 아닐 때는 드래그 불가능하도록 설정 제거

  // 현재 이 영역 위에 마우스가 있는지 여부를 확인하고 UI 업데이트
  useEffect(() => {
    if (!containerRef.current) return;

    if (isOver) {
      // 다른 하이라이트된 요소들 정리
      if (
        currentHighlightedElement &&
        currentHighlightedElement !== containerRef.current
      ) {
        currentHighlightedElement.removeAttribute("data-highlight");
        currentHighlightedElement.classList.remove(
          "ring-2",
          "ring-blue-400",
          "bg-blue-50/20",
          "shadow-md",
          "scale-[1.01]",
          "z-10"
        );
      }

      // 이 요소를 현재 하이라이트된 요소로 설정
      currentHighlightedElement = containerRef.current;
      containerRef.current.setAttribute("data-hovered", "true");
      globalDragState.targetStatus = id;
    } else if (
      containerRef.current.hasAttribute("data-hovered") &&
      currentHighlightedElement !== containerRef.current
    ) {
      containerRef.current.removeAttribute("data-hovered");
    }

    // 하위 아이템에 부모 상태 정보 전달
    const items = containerRef.current.querySelectorAll("[data-item-id]");
    items.forEach((item) => {
      item.setAttribute("data-parent-status", id);
    });
  }, [isOver, id]);

  // 컴포넌트 언마운트 시 정리
  useEffect(() => {
    return () => {
      if (currentHighlightedElement === containerRef.current) {
        currentHighlightedElement = null;
      }
    };
  }, []);

  // 상태에 따라 아이콘 선택
  const getStatusIcon = (status) => {
    switch (status) {
      case "반려됨":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-red-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
              clipRule="evenodd"
            />
          </svg>
        );
      case "대기중":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-yellow-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
              clipRule="evenodd"
            />
          </svg>
        );
      case "승인됨":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-blue-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
              clipRule="evenodd"
            />
          </svg>
        );
      case "장바구니":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-purple-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
          </svg>
        );
      case "주문완료":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-green-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M4 3a2 2 0 100 4h12a2 2 0 100-4H4z" />
            <path
              fillRule="evenodd"
              d="M3 8h14v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm5 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"
              clipRule="evenodd"
            />
          </svg>
        );
      default:
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-gray-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5A1 1 0 0110 8h2a2 2 0 012 2v.5a.5.5 0 01-1 0V10a1 1 0 00-1-1h-2a.5.5 0 01-.5-.5 1.5 1.5 0 00-3 0V12a.5.5 0 01-1 0v-1.5a2.5 2.5 0 012.5-2.5h1z"
              clipRule="evenodd"
            />
          </svg>
        );
    }
  };

  // 제목에서 괄호와 항목 수 분리
  const titleParts = title.match(/^(.+) \((\d+)\)$/);
  const statusName = titleParts ? titleParts[1] : title;
  const itemCount = titleParts ? titleParts[2] : "0";

  // 상태에 따른 헤더 배경색 결정
  const getHeaderBgColor = (status) => {
    switch (status) {
      case "반려됨":
        return "bg-red-50";
      case "대기중":
        return "bg-yellow-50";
      case "승인됨":
        return "bg-blue-50";
      case "장바구니":
        return "bg-purple-50";
      case "주문완료":
      case "완료됨":
      case "입고 완료":
        return "bg-green-50";
      default:
        return "bg-white";
    }
  };

  return (
    <div
      ref={(node) => {
        setNodeRef(node);
        containerRef.current = node;
      }}
      className={`h-full flex flex-col rounded-lg p-[2px] ${
        className || "bg-gray-50"
      } ${
        isOver
          ? "ring-2 ring-blue-400 bg-blue-50/20 shadow-md scale-[1.01] z-10"
          : ""
      } transition-all duration-150 overflow-hidden`}
      data-status={id}
      data-type="container"
      data-droppable="true"
      style={{ maxHeight: "520px" }}
    >
      {/* 상단 헤더 부분 */}
      <div
        className={`flex items-center justify-between mb-2 p-2 rounded-lg shadow-sm ${getHeaderBgColor(
          id
        )}`}
      >
        <div className="flex items-center">
          {getStatusIcon(id)}
          <h3 className="font-medium text-gray-700 ml-2">{statusName}</h3>
        </div>
        <span className="bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded-full flex items-center justify-center min-w-[28px]">
          {itemCount}
        </span>
      </div>

      {/* 스크롤 영역 부분 - 스크롤바 숨김 스타일 적용 */}
      <div
        className="flex-1 overflow-y-auto p-1 min-h-[250px] h-[300px] rounded-md scrollbar-hide"
        style={{
          msOverflowStyle: "none",
        }}
      >
        <SortableContext
          items={items.map((item) => item.id)}
          strategy={verticalListSortingStrategy}
        >
          {items.length > 0 ? (
            <div className="px-1 pb-2">
              {items.map((item) => renderItem({ ...item, status: id }))}
            </div>
          ) : (
            <div className="flex items-center justify-center h-full">
              <p className="text-gray-400 text-sm italic">항목 없음</p>
            </div>
          )}
        </SortableContext>
      </div>
    </div>
  );
};

// 각 신청 유형별 상태 순서
const STATUS_FLOW = {
  vacation: ["반려됨", "대기중", "승인됨"],
  stock: ["반려됨", "장바구니", "대기중", "승인됨", "주문완료"],
  request: ["반려됨", "대기중", "승인됨"],
};

// 상태별 디스플레이 이름
const STATUS_DISPLAY_NAMES = {
  대기중: "대기중",
  승인됨: "승인됨",
  반려됨: "반려됨",
  취소됨: "취소됨",
  "주문 완료": "주문 완료",
  주문완료: "주문완료",
  장바구니: "장바구니",
  "입고 완료": "입고 완료",
  완료됨: "완료됨",
};

// 더미 데이터 정의
const DUMMY_VACATION_REQUESTS = [
  {
    id: "vac1",
    vacationType: "휴가",
    startDate: "2023/12/20",
    endDate: "2023/12/22",
    startTime: "09:00",
    endTime: "18:00",
    status: "승인됨",
    userName: "김의사",
    days: 3,
    reason: "연차 사용",
    timestamp: new Date("2023/12/10").getTime(),
    requestType: "manual",
  },
  {
    id: "vac2",
    vacationType: "반차",
    startDate: "2023/12/15",
    endDate: "2023/12/15",
    startTime: "09:00",
    endTime: "13:00",
    status: "대기중",
    userName: "박간호",
    halfDayType: "오전반차",
    days: 0.5,
    reason: "개인 사정",
    timestamp: new Date("2023/12/13").getTime(),
    requestType: "manual",
  },
  {
    id: "vac3",
    vacationType: "경조사",
    startDate: "2023/12/05",
    endDate: "2023/12/07",
    startTime: "09:00",
    endTime: "18:00",
    status: "반려됨",
    userName: "최관리",
    days: 3,
    reason: "결혼식 참석",
    timestamp: new Date("2023/12/01").getTime(),
    requestType: "manual",
  },
  {
    id: "vac4",
    vacationType: "휴가",
    startDate: "2023/12/24",
    endDate: "2023/12/26",
    startTime: "09:00",
    endTime: "18:00",
    status: "대기중",
    userName: "이수석",
    days: 3,
    reason: "크리스마스 휴가",
    timestamp: new Date("2023/12/18").getTime(),
    requestType: "manual",
  },
];

const DUMMY_STOCK_REQUESTS = [
  {
    id: "stock1",
    itemName: "의료용 소독제",
    category: "의료용 소모품",
    quantity: 10,
    measure: "개",
    price: 25000,
    status: "입고 완료",
    requestedByName: "김의사",
    timestamp: new Date("2023/12/05").getTime(),
    requestType: "manual",
    department: "진료", // 명시적 부서 추가
    requestReason: "소독제 부족으로 추가 구매 필요",
  },
  {
    id: "stock2",
    itemName: "사무용 프린터 용지",
    category: "사무용 소모품",
    quantity: 5,
    measure: "박스",
    price: 35000,
    status: "승인됨",
    requestedByName: "박간호",
    timestamp: new Date("2023/12/10").getTime(),
    requestType: "manual",
    department: "간호", // 명시적 부서 추가
    requestReason: "문서 작업용 프린터 용지 신청",
  },
  {
    id: "stock3",
    itemName: "CT 장비",
    category: "의료용품",
    quantity: 1,
    measure: "대",
    price: 50000000,
    status: "장바구니",
    requestedByName: "최관리",
    timestamp: new Date("2023/12/15").getTime(),
    requestType: "manual",
    requestReason: "노후 장비 교체 필요",
    department: "원무",
  },
  {
    id: "stock4",
    itemName: "수술 장갑",
    category: "의료용 소모품",
    quantity: 30,
    measure: "박스",
    price: 120000,
    status: "주문완료",
    requestedByName: "이과장",
    timestamp: new Date("2023/12/12").getTime(),
    requestType: "auto",
    requestReason: "안전재고(25) 이하로 수량(15)이 감소하여 자동 신청됨",
    safeStock: 25,
    department: "진료",
  },
  {
    id: "stock5",
    itemName: "모니터",
    category: "사무용품",
    quantity: 3,
    measure: "대",
    price: 750000,
    status: "대기중",
    requestedByName: "최과장",
    timestamp: new Date("2023/12/17").getTime(),
    requestType: "manual",
    requestReason: "추가 근무 공간 설치를 위한 신청",
    department: "원무",
  },
  {
    id: "stock6",
    itemName: "수액세트",
    category: "의료용 소모품",
    quantity: 50,
    measure: "세트",
    price: 15000,
    status: "장바구니",
    requestedByName: "김간호",
    timestamp: new Date("2023/12/19").getTime(),
    requestType: "auto",
    requestReason: "안전재고(40) 이하로 수량(30)이 감소하여 자동 신청됨",
    safeStock: 40,
    department: "간호",
  },
  {
    id: "stock7",
    itemName: "소독용 알코올",
    category: "의료용 소모품",
    quantity: 20,
    measure: "통",
    price: 8000,
    status: "대기중",
    requestedByName: "시스템",
    timestamp: new Date("2023/12/20").getTime(),
    requestType: "auto",
    requestReason: "안전재고(15) 이하로 수량(8)이 감소하여 자동 신청됨",
    safeStock: 15,
    department: "원무",
  },
  {
    id: "stock8",
    itemName: "주사기",
    category: "의료용 소모품",
    quantity: 100,
    measure: "개",
    price: 5000,
    status: "승인됨",
    requestedByName: "시스템",
    timestamp: new Date("2023/12/18").getTime(),
    requestType: "auto",
    requestReason: "안전재고(80) 이하로 수량(35)이 감소하여 자동 신청됨",
    safeStock: 80,
    department: "원무",
  },
];

const DUMMY_REQUESTS = [
  {
    id: "req1",
    title: "진료실 에어컨 점검 요청",
    message:
      "3번 진료실 에어컨에서 이상한 소음이 발생하고 있습니다. 점검 부탁드립니다.",
    status: "완료됨",
    receiverPeople: ["admin1", "admin2"],
    senderPeople: ["user1"],
    priority: "상",
    timestamp: new Date("2023/12/01").getTime(),
    requestType: "manual",
  },
  {
    id: "req2",
    title: "약품 발주 요청",
    message: "진통제가 부족하니 발주 부탁드립니다.",
    status: "승인됨",
    receiverPeople: ["admin1"],
    senderPeople: ["user1"],
    priority: "중",
    timestamp: new Date("2023/12/10").getTime(),
    requestType: "manual",
  },
  {
    id: "req3",
    title: "환자 기록 수정 요청",
    message: "김환자의 진료 기록에 오류가 있습니다. 수정 부탁드립니다.",
    status: "대기중",
    receiverPeople: ["admin1", "admin2", "admin3"],
    senderPeople: ["user1"],
    priority: "하",
    timestamp: new Date("2023/12/15").getTime(),
    requestType: "manual",
  },
  {
    id: "req4",
    title: "회의실 사용 요청",
    message:
      "12월 20일 오후 2시에 팀 미팅을 위해 2번 회의실 사용을 요청합니다.",
    status: "대기중",
    receiverPeople: ["admin2"],
    senderPeople: ["user1"],
    priority: "중",
    timestamp: new Date("2023/12/18").getTime(),
    requestType: "manual",
  },
];

// 휴가 신청 유형 포맷 함수
const getVacationTitle = (item) => {
  if (item.vacationType === "휴가") {
    return `${item.vacationType} (${item.days}일)`;
  } else if (item.vacationType === "반차") {
    return `${item.vacationType} (${item.halfDayType || ""})`;
  } else {
    return item.vacationType;
  }
};

// 날짜 포맷 함수
const formatDate = (timestamp) => {
  if (!timestamp) return "";

  const date =
    timestamp instanceof Date
      ? timestamp
      : new Date(
          typeof timestamp === "number" ? timestamp : timestamp.seconds * 1000
        );

  return format(date, "yyyy/MM/dd HH:mm");
};

// 개선된 충돌 감지 함수 - rectIntersection과 pointerWithin의 조합
const customCollisionDetection = (args) => {
  // 첫 번째로 rectIntersection을 시도
  const rectCollisions = rectIntersection(args);
  if (rectCollisions.length > 0) {
    return rectCollisions;
  }

  // 그 다음 pointerWithin을 시도
  return pointerWithin(args);
};

// ConfirmModal 컴포넌트 추가
const ConfirmModal = ({
  isVisible,
  setIsVisible,
  title,
  message,
  onConfirm,
}) => {
  const handleConfirm = () => {
    if (onConfirm) {
      onConfirm();
    }
    setIsVisible(false);
  };

  if (!isVisible) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-[450px] p-6 animate-fade-in-up">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-gray-800">{title}</h2>
          <button
            onClick={() => setIsVisible(false)}
            className="text-gray-500 hover:text-gray-700 transition-colors"
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        <p className="text-gray-600 mb-6">{message}</p>

        <div className="flex justify-end space-x-3">
          <button
            onClick={() => setIsVisible(false)}
            className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 transition-colors"
          >
            취소
          </button>
          <button
            onClick={handleConfirm}
            className="bg-onceBlue text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
          >
            확인
          </button>
        </div>
      </div>
    </div>
  );
};

const RequestStatusModal = ({
  isVisible,
  setIsVisible,
  initialTab = "vacation",
}) => {
  const { userLevelData, currentUser } = useUserLevel();
  const { showToast } = useToast();
  const { autoHideOldDocuments } = useFirestore();
  const [activeTab, setActiveTab] = useState(initialTab);
  const [vacationRequests, setVacationRequests] = useState([]);
  const [stockRequests, setStockRequests] = useState([]);
  const [generalRequests, setGeneralRequests] = useState([]);
  // 누락된 상태 변수 추가
  const [stockItems, setStockItems] = useState([]);

  // 모달 상태
  const [showVacationModal, setShowVacationModal] = useState(false);
  const [showStockRequestModal, setShowStockRequestModal] = useState(false);
  const [showRequestModal, setShowRequestModal] = useState(false);

  // 선택된 항목
  const [selectedItem, setSelectedItem] = useState(null);

  // 상태별 필터링
  const [statusFilter, setStatusFilter] = useState("all");

  // useDummyData 상태 제거하고 isGeneratingData만 유지
  const [isGeneratingData, setIsGeneratingData] = useState(false);

  // 드래그 중인 항목
  const [activeId, setActiveId] = useState(null);

  // 관리자 권한 여부
  const isAdmin =
    userLevelData?.role === "대표원장" || userLevelData?.role === "과장";

  // 상세 모달 관련 상태 추가
  const [showDetailModal, setShowDetailModal] = useState(false);

  // 상태 변경 사유 입력 모달 관련 상태
  const [showReasonModal, setShowReasonModal] = useState(false);
  const [targetStatusChange, setTargetStatusChange] = useState({
    itemId: null,
    fromStatus: "",
    toStatus: "",
  });

  // 확인 모달 상태 추가
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [confirmModalProps, setConfirmModalProps] = useState({
    title: "",
    message: "",
    onConfirm: null,
  });

  // 개선된 센서 설정
  const sensors = useSensors(
    useSensor(MouseSensor, {
      // 마우스 감도 높임 - 빨리 시작
      activationConstraint: {
        distance: 1, // 최소 이동 거리 (픽셀)
      },
    }),
    useSensor(TouchSensor, {
      // 터치 감도 높임 - 빨리 시작
      activationConstraint: {
        delay: 100, // 지연시간 (ms)
        tolerance: 5, // 허용 오차
      },
    })
  );

  // 데이터 불러오기
  useEffect(() => {
    if (!userLevelData?.id || !isVisible) return;

    // 모달이 열릴 때 일주일이 지난 항목들을 숨김 처리
    const hideOldItems = async () => {
      try {
        await autoHideOldDocuments("vacations");
        await autoHideOldDocuments("stockRequests");
        await autoHideOldDocuments("requests");
      } catch (error) {
        console.error("오래된 항목 숨김 처리 오류:", error);
      }
    };

    hideOldItems();

    // 실제 데이터 로딩
    const loadRealData = async () => {
      console.log("데이터 로딩 시작 - 사용자 역할:", userLevelData?.role);

      // 권한 확인
      const isOwner = isHospitalOwner(userLevelData, currentUser);
      const isAdminMgr = isAdministrativeManager(userLevelData, currentUser);

      console.log("◆ 데이터 로딩 권한 확인");
      console.log("◆ 대표원장 여부:", isOwner);
      console.log("◆ 원무과장 여부:", isAdminMgr);
      console.log("◆ 사용자 부서:", userLevelData?.department);
      console.log("◆ 현재 userLevelData.role:", userLevelData?.role);
      console.log("◆ 현재 currentUser.role:", currentUser?.role);

      if (isOwner) {
        console.log("=== 대표원장 권한으로 모든 데이터 조회 시작 ===");
      }

      // 언마운트 시 구독 해제할 함수들
      const unsubscribe = [];

      // 휴가 신청 데이터 가져오기
      const vacationQuery = query(
        collection(db, "vacations"),
        orderBy("createdAt", "desc")
      );

      const vacationUnsub = onSnapshot(vacationQuery, (snapshot) => {
        const vacations = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
          timestamp: doc.data().createdAt?.toDate?.() || new Date(),
        }));
        setVacationRequests(vacations);
      });
      unsubscribe.push(vacationUnsub);

      // 비품 신청 데이터 가져오기
      const stockQuery = query(
        collection(db, "stockRequests"),
        orderBy("createdAt2", "desc")
      );

      const stockUnsub = onSnapshot(stockQuery, (snapshot) => {
        const stocks = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
          timestamp: doc.data().createdAt || new Date().getTime(),
        }));
        setStockRequests(stocks);
        setStockItems(stocks); // stockItems 상태도 업데이트
      });
      unsubscribe.push(stockUnsub);

      // 일반 요청 데이터 가져오기
      const requestQuery = query(
        collection(db, "requests"),
        orderBy("createdAt2", "desc")
      );

      const requestUnsub = onSnapshot(requestQuery, (snapshot) => {
        const requests = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
          timestamp: doc.data().createdAt || new Date().getTime(),
        }));
        setGeneralRequests(requests);
      });
      unsubscribe.push(requestUnsub);

      // 컴포넌트 언마운트 시 구독 해제
      return () => {
        unsubscribe.forEach((unsub) => unsub());
      };
    };

    // 데이터 로드 시작
    const unsubscribeAll = loadRealData();

    // 컴포넌트 언마운트 시 구독 해제
    return () => {
      if (typeof unsubscribeAll === "function") {
        unsubscribeAll();
      }
    };
  }, [userLevelData?.id, isVisible, autoHideOldDocuments, showToast]);

  // 컴포넌트 마운트 시 초기 탭 설정
  useEffect(() => {
    if (initialTab && ["vacation", "stock", "request"].includes(initialTab)) {
      setActiveTab(initialTab);
    }
  }, [initialTab]);

  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setStatusFilter("all");
  };

  const handleNewRequest = (type) => {
    switch (type) {
      case "vacation":
        setShowVacationModal(true);
        break;
      case "stock":
        setShowStockRequestModal(true);
        break;
      case "request":
        setShowRequestModal(true);
        break;
      default:
        break;
    }
  };

  // 드래그 시작 핸들러
  const handleDragStart = (event) => {
    const { active } = event;
    setActiveId(active.id);
    globalDragState.activeId = active.id;
    console.log("Drag started:", active.id);
  };

  // 개선된 드래그 종료 핸들러
  const handleDragEnd = (event) => {
    const { active, over } = event;
    setActiveId(null);
    globalDragState.activeId = null;
    globalDragState.isDragging = false;
    globalDragState.targetStatus = null;

    // 모든 하이라이트된 요소 정리
    currentHighlightedElement = null;
    document
      .querySelectorAll('[data-highlight="true"], [data-hovered="true"]')
      .forEach((el) => {
        el.removeAttribute("data-highlight");
        el.removeAttribute("data-hovered");
        el.classList.remove(
          "ring-2",
          "ring-blue-400",
          "bg-blue-50/20",
          "shadow-md",
          "scale-[1.01]",
          "z-10"
        );
      });

    // 디버그 정보 로깅
    console.log("Drag End Event:", {
      activeId: active.id,
      activeData: active.data.current,
      overId: over?.id,
      overData: over?.data.current,
    });

    // 드롭 위치가 없으면 취소
    if (!over) {
      console.log("No drop target found");
      return;
    }

    // 같은 위치면 아무 것도 하지 않음
    if (active.id === over.id) {
      console.log("Dropped in same position");
      return;
    }

    // 드롭 타겟 식별 로직 - HTML 요소의 부모 찾기까지 포함
    let targetStatusId = over.id;
    const overElement = document.querySelector(`[data-item-id="${over.id}"]`);

    // DraggableItem 위에 드롭된 경우
    if (overElement) {
      // 가장 가까운 드롭 영역 찾기
      const closestDroppable = overElement.closest('[data-droppable="true"]');
      if (closestDroppable) {
        targetStatusId = closestDroppable.getAttribute("data-status");
        console.log("Found parent droppable:", targetStatusId);
      }
    }

    // 유효한 드롭 대상인지 확인
    const isValidStatus = STATUS_FLOW[activeTab]?.includes(targetStatusId);
    if (!isValidStatus) {
      console.log("Invalid drop target:", targetStatusId);
      return;
    }

    // 현재 아이템 정보 가져오기
    let currentCollection;
    let currentItem;

    switch (activeTab) {
      case "vacation":
        currentCollection = "vacations";
        currentItem = vacationRequests.find((item) => item.id === active.id);
        break;
      case "stock":
        currentCollection = "stockRequests";
        currentItem = stockRequests.find((item) => item.id === active.id);
        break;
      case "request":
        currentCollection = "requests";
        currentItem = generalRequests.find((item) => item.id === active.id);
        break;
      default:
        return;
    }

    if (!currentItem) {
      console.log("Current item not found", active.id);
      return;
    }

    // 상태 변경 - targetStatusId를 사용
    const newStatus = targetStatusId;
    console.log("New status:", newStatus);

    // 권한 체크 로직 추가
    const userDataWithCurrentUser = {
      ...userLevelData,
      currentUser,
    };

    // 권한 체크 로직 추가
    // 승인/반려 권한 체크
    if (newStatus === "승인됨" || newStatus === "반려됨") {
      if (activeTab === "vacation") {
        if (!canApproveVacation(userLevelData, currentUser)) {
          showToast("휴가 신청을 승인/반려할 권한이 없습니다.", "error");
          return;
        }
      } else if (activeTab === "stock") {
        if (!canApproveStockRequest(userLevelData, currentUser)) {
          showToast("비품 신청을 승인/반려할 권한이 없습니다.", "error");
          return;
        }
      } else if (activeTab === "request") {
        if (!canManageRequest(userLevelData, currentUser)) {
          showToast("요청을 승인/반려할 권한이 없습니다.", "error");
          return;
        }
      }
    }
    // 주문 관련 상태 체크 (비품에만 해당)
    else if (
      ["주문 필요", "주문 완료", "입고 완료"].includes(newStatus) &&
      activeTab === "stock"
    ) {
      if (!canOrderStock(userLevelData, currentUser)) {
        showToast("비품 주문 상태를 변경할 권한이 없습니다.", "error");
        return;
      }
    }

    // 선택된 탭의 데이터 가져오기
    const getCurrentData = () => {
      let data;
      switch (activeTab) {
        case "vacation":
          data = vacationRequests;
          break;
        case "stock":
          data = stockRequests;
          break;
        case "request":
          data = generalRequests;
          break;
        default:
          data = [];
      }

      console.log("현재 사용자 역할:", userLevelData?.role);
      console.log("현재 사용자 부서:", userLevelData?.department);
      console.log(`${activeTab} 데이터 총 개수:`, data.length);

      // 대표원장 여부 확인
      const isOwner = isHospitalOwner(userLevelData, currentUser);
      console.log("대표원장 여부 (isHospitalOwner):", isOwner);

      // 대표원장인 경우 모든 데이터를 볼 수 있음
      if (isOwner) {
        console.log("대표원장 권한으로 모든 데이터 조회 - 필터링 없음");
        return data;
      }

      // 요청 데이터의 경우 - 누구나 모든 요청 데이터를 볼 수 있음
      if (activeTab === "request") {
        console.log("요청 데이터는 모든 사용자가 볼 수 있음");
        return data;
      }

      // 원무과장이고 비품 데이터인 경우 - 모든 비품 데이터를 볼 수 있음
      const isAdminManager = isAdministrativeManager(userLevelData, currentUser);
      console.log("원무과장 여부 (isAdministrativeManager):", isAdminManager);

      if (activeTab === "stock" && isAdminManager) {
        console.log("원무과장 권한으로 모든 비품 데이터 조회");
        return data;
      }

      // 일반 사용자의 경우 자기 부서 데이터만 필터링
      if (userLevelData?.department) {
        console.log("일반 사용자 권한으로 필터링된 데이터 조회");
        const userDept = userLevelData.department;

        // 각 탭별로 다른 필드를 기준으로 필터링
        if (activeTab === "vacation") {
          // 휴가의 경우 신청자 또는 부서 기준 (부서는 팀 명칭 유무 무관하게 비교)
          const filtered = data.filter(
            (item) =>
              item.userName === userLevelData.name ||
              item.userId === userLevelData.id ||
              isDepartmentMatch(item.department, userDept)
          );
          console.log("필터링 전 휴가 데이터 개수:", data.length);
          console.log("필터링 후 휴가 데이터 개수:", filtered.length);
          return filtered;
        } else if (activeTab === "stock") {
          // 비품은 부서 기준 (팀 명칭 유무 무관하게 비교)
          const filtered = data.filter((item) =>
            isDepartmentMatch(item.department, userDept)
          );
          console.log("필터링 전 비품 데이터 개수:", data.length);
          console.log("필터링 후 비품 데이터 개수:", filtered.length);
          return filtered;
        }
      }

      return data;
    };

    // 상태별로 데이터 분류
    const getItemsByStatus = () => {
      const data = getCurrentData();
      const statusOrder = STATUS_FLOW[activeTab] || [];
      const result = {};

      // 대표원장 확인
      const isOwner = isHospitalOwner(userLevelData, currentUser);
      console.log(
        `getItemsByStatus - 대표원장 권한: ${isOwner}, 탭: ${activeTab}, 데이터 수: ${data.length}`
      );

      // 초기화
      statusOrder.forEach((status) => {
        result[status] = [];
      });

      // 아이템 분류
      data.forEach((item) => {
        const status = item.status || "대기중";
        if (result[status]) {
          result[status].push(item);
        } else {
          // 정의되지 않은 상태는 대기중으로 처리
          result["대기중"] = result["대기중"] || [];
          result["대기중"].push(item);
        }
      });

      return result;
    };

    // 상태 변경 확인 핸들러
    const handleStatusConfirm = () => {
      if (!selectedStatus) return; // 선택된 상태가 있어야 함

      if (onStatusChange && reason.trim()) {
        onStatusChange(item.id, selectedStatus, reason);
        showToast(`상태가 '${selectedStatus}'(으)로 변경되었습니다.`, "success");
        setIsVisible(false);
      } else {
        showToast("사유를 입력해주세요.", "error");
      }
    };

    // 사유 입력 핸들러
    const handleReasonChange = (e) => {
      setReason(e.target.value);
    };

    // 상태 변경 확인 핸들러
    const handleStatusConfirm = () => {
      if (!selectedStatus) return; // 선택된 상태가 있어야 함

      if (onStatusChange && reason.trim()) {
        onStatusChange(item.id, selectedStatus, reason);
        showToast(`상태가 '${selectedStatus}'(으)로 변경되었습니다.`, "success");
        setIsVisible(false);
      } else {
        showToast("사유를 입력해주세요.", "error");
      }
    };

    // 아이템 유형별 상세 정보 렌더링
    const renderDetails = () => {
      switch (itemType) {
        case "vacation":
          return (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-500">신청 유형</h3>
                  <p className="text-base">{item.vacationType || "휴가"}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">신청자</h3>
                  <p className="text-base">{item.userName || "미정"}</p>
                </div>
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">기간</h3>
                  <p className="text-base">
                    {item.startDate} {item.startTime} ~ {item.endDate}{" "}
                    {item.endTime}
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">휴가 일수</h3>
                  <p className="text-base">{item.days || 0}일</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">현재 상태</h3>
                  <p className={`text-base ${getStatusColor(item.status)}`}>
                    {item.status}
                  </p>
                </div>
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">사유</h3>
                  <p className="text-base bg-gray-50 p-2 rounded-md">
                    {item.reason || "사유 없음"}
                  </p>
                </div>
                {item.approvalReason && (
                  <div className="col-span-2">
                    <h3 className="text-sm font-medium text-gray-500">
                      승인/반려 사유
                    </h3>
                    <p className="text-base bg-gray-50 p-2 rounded-md">
                      {item.approvalReason}
                    </p>
                  </div>
                )}
              </div>
            </div>
          );
        case "stock":
          return (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-500">분류</h3>
                  <p className="text-base">{item.category || "미분류"}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">신청자</h3>
                  <p className="text-base">{item.requestedByName || "미정"}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">수량</h3>
                  <p className="text-base">
                    {item.quantity || 0} {item.measure || "개"}
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">단가</h3>
                  <p className="text-base">
                    {item.price ? `${item.price.toLocaleString()}원` : "-"}
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">거래처</h3>
                  <p className="text-base">{item.vendor || "-"}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">현재 상태</h3>
                  <p className={`text-base ${getStatusColor(item.status)}`}>
                    {item.status}
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">신청 유형</h3>
                  <p className="text-base">
                    {item.requestType === "auto" ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                        자동 신청
                      </span>
                    ) : item.requestType === "manual" ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        수동 신청
                      </span>
                    ) : (
                      "-"
                    )}
                  </p>
                </div>
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">신청 사유</h3>
                  <p className="text-base bg-gray-50 p-2 rounded-md">
                    {item.requestReason || "사유 없음"}
                  </p>
                </div>
                {item.approvalReason && (
                  <div className="col-span-2">
                    <h3 className="text-sm font-medium text-gray-500">
                      승인/반려 사유
                    </h3>
                    <p className="text-base bg-gray-50 p-2 rounded-md">
                      {item.approvalReason}
                    </p>
                  </div>
                )}
              </div>
            </div>
          );
        case "request":
          return (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-500">중요도</h3>
                  <p className="text-base">{item.priority || "중"}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">발신자</h3>
                  <p className="text-base">{item.senderPeople?.[0] || "익명"}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">수신자</h3>
                  <p className="text-base">
                    {item.receiverPeople?.length || 0}명
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-gray-500">현재 상태</h3>
                  <p className={`text-base ${getStatusColor(item.status)}`}>
                    {item.status}
                  </p>
                </div>
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">내용</h3>
                  <p className="text-base bg-gray-50 p-2 rounded-md">
                    {item.message || "내용 없음"}
                  </p>
                </div>
                {item.approvalReason && (
                  <div className="col-span-2">
                    <h3 className="text-sm font-medium text-gray-500">
                      승인/반려 사유
                    </h3>
                    <p className="text-base bg-gray-50 p-2 rounded-md">
                      {item.approvalReason}
                    </p>
                  </div>
                )}
              </div>
            </div>
          );
        default:
          return <div>상세 정보가 없습니다.</div>;
      }
    };

    // 상태에 따른 텍스트 색상 반환
    const getStatusColor = (status) => {
      switch (status) {
        case "반려됨":
          return "text-red-600";
        case "승인됨":
          return "text-blue-600";
        case "대기중":
          return "text-yellow-600";
        case "완료됨":
        case "주문완료":
        case "입고 완료":
          return "text-green-600";
        default:
          return "text-gray-600";
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg shadow-xl w-[550px] max-h-[80vh] overflow-y-auto p-6 animate-fade-in-up">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold text-gray-800">{getTitle()}</h2>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-500 hover:text-gray-700 transition-colors"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          {renderDetails()}

          <div className="mt-8 border-t pt-4">
            <h3 className="text-sm font-medium text-gray-500 mb-2">상태 변경</h3>
            <div className="flex flex-wrap gap-2">
              {STATUS_FLOW[itemType]?.map((status) => (
                <button
                  key={status}
                  onClick={() => handleStatusSelect(status)}
                  className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                    selectedStatus === status
                      ? status === "반려됨"
                        ? "bg-red-100 border-2 border-red-400 text-red-700"
                        : status === "승인됨"
                        ? "bg-blue-100 border-2 border-blue-400 text-blue-700"
                        : status === "대기중"
                        ? "bg-yellow-100 border-2 border-yellow-400 text-yellow-700"
                        : status === "장바구니"
                        ? "bg-purple-100 border-2 border-purple-400 text-purple-700"
                        : status === "주문완료" ||
                          status === "완료됨" ||
                          status === "입고 완료"
                        ? "bg-green-100 border-2 border-green-400 text-green-700"
                        : "bg-gray-100 border-2 border-gray-300 text-gray-700"
                      : status === "반려됨"
                      ? "bg-white border border-red-300 text-red-600 hover:bg-red-50"
                      : status === "승인됨"
                      ? "bg-white border border-blue-300 text-blue-600 hover:bg-blue-50"
                      : status === "대기중"
                      ? "bg-white border border-yellow-300 text-yellow-600 hover:bg-yellow-50"
                      : status === "장바구니"
                      ? "bg-white border border-purple-300 text-purple-600 hover:bg-purple-50"
                      : status === "주문완료" ||
                        status === "완료됨" ||
                        status === "입고 완료"
                      ? "bg-white border border-green-300 text-green-600 hover:bg-green-50"
                      : "bg-white border border-gray-300 text-gray-600 hover:bg-gray-50"
                  }`}
                >
                  {status}
                </button>
              ))}
            </div>

            {selectedStatus && (
              <div className="mt-4 border-t pt-4 animate-fade-in">
                <div className="flex items-center mb-2">
                  <h3 className="text-sm font-medium text-gray-500">
                    변경 사유 입력
                  </h3>
                  <span className="text-xs text-gray-400 ml-2">(필수)</span>
                </div>
                <textarea
                  value={reason}
                  onChange={handleReasonChange}
                  placeholder="사유를 입력해주세요..."
                  className="w-full border border-gray-300 rounded-md px-4 py-2 h-24 resize-none focus:outline-none focus:ring-2 focus:ring-onceBlue focus:border-transparent mb-2"
                />
                <div className="text-xs text-gray-500 mb-4">
                  * 상태 변경 시 사유가 필수적으로 기록됩니다.
                </div>
              </div>
            )}
          </div>

          <div className="mt-6 flex justify-end space-x-3">
            <button
              onClick={() => setIsVisible(false)}
              className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 transition-colors text-sm font-medium"
            >
              닫기
            </button>
            {selectedStatus && reason.trim() && (
              <button
                onClick={handleStatusConfirm}
                className="bg-onceBlue text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors text-sm font-medium shadow-sm"
              >
                저장
              </button>
            )}
          </div>
        </div>
      </div>
    );
  };

  // 사유 입력 모달 컴포넌트
  const ReasonInputModal = ({
    isVisible,
    setIsVisible,
    onSubmit,
    actionType,
    itemType,
  }) => {
    const [reason, setReason] = useState("");
    const reasonRef = useRef(null);

    // 모달이 열릴 때 입력 필드에 포커스
    useEffect(() => {
      if (isVisible && reasonRef.current) {
        reasonRef.current.focus();

        // 액션 타입에 따라 기본 사유 설정
        const defaultReason = getDefaultReason();
        setReason(defaultReason);
      }
    }, [isVisible, actionType, itemType]);

    // 사유 입력 핸들러
    const handleReasonChange = (e) => {
      setReason(e.target.value);
    };

    // 모달 닫을 때 상태 초기화
    const handleClose = () => {
      setReason("");
      setIsVisible(false);
    };

    // 확인 버튼 클릭 핸들러
    const handleSubmit = () => {
      if (onSubmit && reason.trim()) {
        onSubmit(reason);
      }
      handleClose();
    };

    // 키 다운 이벤트 핸들러 - 엔터 키 처리
    const handleKeyDown = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault(); // 기본 엔터 동작 방지
        if (reason.trim()) {
          handleSubmit();
        }
      }
    };

    // 액션 타입에 따른 타이틀 설정
    const getActionTitle = () => {
      switch (actionType) {
        case "승인됨":
          return "승인 사유";
        case "반려됨":
          return "반려 사유";
        case "장바구니":
          return "장바구니 이동 사유";
        case "대기중":
          return "대기 상태 변경 사유";
        case "주문완료":
          return "주문 완료 사유";
        case "완료됨":
          return "완료 처리 사유";
        case "입고 완료":
          return "입고 완료 사유";
        default:
          return "상태 변경 사유";
      }
    };

    // 아이템 타입에 따른 추가 설명
    const getDescription = () => {
      switch (itemType) {
        case "vacation":
          if (actionType === "반려됨") {
            return "휴가 신청을 반려하는 사유를 입력해주세요.";
          } else if (actionType === "승인됨") {
            return "휴가 신청을 승인하는 사유를 입력해주세요.";
          } else {
            return `휴가 신청을 ${actionType} 상태로 변경하는 사유를 입력해주세요.`;
          }
        case "stock":
          if (actionType === "반려됨") {
            return "비품 신청을 반려하는 사유를 입력해주세요.";
          } else if (actionType === "승인됨") {
            return "비품 신청을 승인하는 사유를 입력해주세요.";
          } else if (actionType === "장바구니") {
            return "비품 신청을 장바구니로 이동하는 사유를 입력해주세요.";
          } else if (actionType === "주문완료") {
            return "비품 주문이 완료된 사유를 입력해주세요.";
          } else if (actionType === "입고 완료") {
            return "비품 입고가 완료된 사유를 입력해주세요.";
          } else {
            return `비품 신청을 ${actionType} 상태로 변경하는 사유를 입력해주세요.`;
          }
        case "request":
          if (actionType === "반려됨") {
            return "요청을 반려하는 사유를 입력해주세요.";
          } else if (actionType === "승인됨") {
            return "요청을 승인하는 사유를 입력해주세요.";
          } else if (actionType === "완료됨") {
            return "요청이 완료된 사유를 입력해주세요.";
          } else {
            return `요청을 ${actionType} 상태로 변경하는 사유를 입력해주세요.`;
          }
        default:
          return `${actionType} 상태로 변경하는 사유를 입력해주세요.`;
      }
    };

    // 액션 타입에 따른 기본 사유 텍스트
    const getDefaultReason = () => {
      switch (actionType) {
        case "승인됨":
          switch (itemType) {
            case "vacation":
              return "검토 후 승인합니다.";
            case "stock":
              return "비품 신청을 승인합니다.";
            case "request":
              return "요청 사항을 확인하고 승인합니다.";
            default:
              return "승인합니다.";
          }
        case "반려됨":
          switch (itemType) {
            case "vacation":
              return "추가 검토가 필요하여 반려합니다.";
            case "stock":
              return "재고 상황을 고려하여 반려합니다.";
            case "request":
              return "검토 후 반려합니다.";
            default:
              return "반려합니다.";
          }
        case "장바구니":
          return "장바구니에 추가합니다.";
        case "대기중":
          return "대기 상태로 변경합니다.";
        case "주문완료":
          return "주문 처리를 완료합니다.";
        case "완료됨":
          return "처리가 완료되었습니다.";
        case "입고 완료":
          return "입고 처리를 완료합니다.";
        default:
          return `${actionType} 상태로 변경합니다.`;
      }
    };

    return (
      <div
        className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-200 ${
          isVisible ? "opacity-100" : "opacity-0 pointer-events-none"
        }`}
      >
        <div className="bg-white rounded-lg shadow-xl w-[450px] p-6 animate-fade-in-up">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-gray-800">
              {getActionTitle()}
            </h2>
            <button
              onClick={handleClose}
              className="text-gray-500 hover:text-gray-700 transition-colors"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          <p className="text-gray-600 mb-4">{getDescription()}</p>

          <textarea
            ref={reasonRef}
            value={reason}
            onChange={handleReasonChange}
            onKeyDown={handleKeyDown}
            placeholder="사유를 입력해주세요..."
            className="w-full border border-gray-300 rounded-md px-4 py-2 h-32 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4"
          />

          <div className="flex justify-end space-x-3">
            <button
              onClick={handleClose}
              className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 transition-colors"
            >
              취소
            </button>
            <button
              onClick={handleSubmit}
              className="bg-onceBlue text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
              disabled={!reason.trim()}
            >
              확인
            </button>
          </div>
        </div>
      </div>
    );
  };

  // 전역 상태 변수 추가 - 동시에 여러 요소가 하이라이트되는 문제 방지
  let currentHighlightedElement = null;
  let globalDragState = {
    isDragging: false,
    activeId: null,
    targetStatus: null,
  };

  // 드래그 가능한 항목 컴포넌트
  const DraggableItem = ({ id, data, type, onItemClick, isAdmin }) => {
    const {
      attributes,
      listeners,
      setNodeRef,
      transform,
      transition,
      isDragging,
      over,
    } = useSortable({
      id,
      data: {
        type: "item",
        item: data,
        itemType: type,
        id,
        parent: data.status, // 부모 상태 저장
      },
    });

    // 컴포넌트의 ref
    const itemRef = useRef(null);
    const [isBeingHoveredOver, setIsBeingHoveredOver] = useState(false);

    // DndContext에서 모니터링을 위한 훅 사용
    const dndContext = useDndMonitor({
      onDragStart() {
        // 드래그 시작 시 전역 상태 초기화
        globalDragState.isDragging = true;
        currentHighlightedElement = null;
      },
      onDragOver({ active, over }) {
        // 아이템 위에 드래그했는지 확인
        const isOverThisItem = over && over.id === id && active.id !== id;

        // 이전 상태와 다를 때만 상태 업데이트 (불필요한 리렌더링 방지)
        if (isOverThisItem !== isBeingHoveredOver) {
          setIsBeingHoveredOver(isOverThisItem);
        }

        if (isOverThisItem) {
          // 부모 드롭 영역 찾기
          const parentDropArea = itemRef.current?.closest(
            '[data-droppable="true"]'
          );

          if (parentDropArea && currentHighlightedElement !== parentDropArea) {
            // 이전에 하이라이트된 요소가 있으면 모두 제거
            if (currentHighlightedElement) {
              currentHighlightedElement.removeAttribute("data-highlight");
              currentHighlightedElement.classList.remove(
                "ring-2",
                "ring-blue-400",
                "bg-blue-50/20",
                "shadow-md",
                "scale-[1.01]",
                "z-10"
              );
            }

            // 현재 영역을 하이라이트하고 전역 참조 업데이트
            currentHighlightedElement = parentDropArea;
            parentDropArea.setAttribute("data-highlight", "true");
            parentDropArea.classList.add(
              "ring-2",
              "ring-blue-400",
              "bg-blue-50/20",
              "shadow-md",
              "scale-[1.01]",
              "z-10"
            );

            // 전역 상태 업데이트
            globalDragState.targetStatus =
              parentDropArea.getAttribute("data-status");
          }
        }
      },
      onDragEnd() {
        // 드래그 종료 시 상태 초기화
        setIsBeingHoveredOver(false);
        globalDragState.isDragging = false;
        globalDragState.targetStatus = null;

        // 하이라이트된 요소 정리
        if (currentHighlightedElement) {
          currentHighlightedElement.removeAttribute("data-highlight");
          currentHighlightedElement.classList.remove(
            "ring-2",
            "ring-blue-400",
            "bg-blue-50/20",
            "shadow-md",
            "scale-[1.01]",
            "z-10"
          );
          currentHighlightedElement = null;
        }

        // 혹시나 남아있는 다른 하이라이트된 요소들도 모두 정리
        document
          .querySelectorAll('[data-highlight="true"], [data-hovered="true"]')
          .forEach((el) => {
            el.removeAttribute("data-highlight");
            el.removeAttribute("data-hovered");
            el.classList.remove(
              "ring-2",
              "ring-blue-400",
              "bg-blue-50/20",
              "shadow-md",
              "scale-[1.01]",
              "z-10"
            );
          });
      },
      onDragCancel() {
        // 드래그 취소 시도 정리 작업 수행
        setIsBeingHoveredOver(false);
        globalDragState.isDragging = false;
        globalDragState.targetStatus = null;

        if (currentHighlightedElement) {
          currentHighlightedElement.removeAttribute("data-highlight");
          currentHighlightedElement.classList.remove(
            "ring-2",
            "ring-blue-400",
            "bg-blue-50/20",
            "shadow-md",
            "scale-[1.01]",
            "z-10"
          );
          currentHighlightedElement = null;
        }
      },
    });

    const style = {
      transform: CSS.Transform.toString(transform),
      transition,
      opacity: isDragging ? 0.4 : 1,
      zIndex: isDragging ? 9999 : isBeingHoveredOver ? 30 : 1,
      pointerEvents: isDragging ? "none" : "auto",
    };

    // 날짜 포맷 간소화 (YYYY/MM/DD만 표시)
    const formatShortDate = (timestamp) => {
      if (!timestamp) return "";

      const date =
        timestamp instanceof Date
          ? timestamp
          : new Date(
              typeof timestamp === "number" ? timestamp : timestamp.seconds * 1000
            );

      return format(date, "yyyy/MM/dd");
    };

    let content;
    switch (type) {
      case "vacation":
        content = (
          <>
            <div className="font-medium text-gray-800 text-base mb-2 border-l-4 border-blue-500 pl-2">
              {getVacationTitle(data)}
            </div>

            <div className="flex items-center text-sm text-gray-700 mb-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 mr-1 text-gray-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                />
              </svg>
              <span>
                {data.startDate} ~ {data.endDate}
              </span>
            </div>

            <div
              className="text-sm text-gray-600 mb-2 line-clamp-2"
              title={data.reason}
            >
              {data.reason}
            </div>

            <div className="flex justify-between items-center mt-1 text-xs text-gray-500 pt-1 border-t border-gray-100">
              <div className="flex items-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-3 w-3 mr-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  />
                </svg>
                {data.userName}
              </div>
              <div>{formatShortDate(data.timestamp)}</div>
            </div>
          </>
        );
        break;
      case "stock":
        content = (
          <>
            <div className="font-medium text-gray-800 text-base mb-2 border-l-4 border-green-500 pl-2">
              {data.itemName}
            </div>

            <div className="flex items-center text-sm text-gray-700 mb-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 mr-1 text-gray-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"
                />
              </svg>
              <span>{data.category}</span>
            </div>

            <div className="flex items-center text-sm text-gray-700 mb-2">
              {data.requestType === "auto" ? (
                <span className="px-1.5 py-0.5 text-xs bg-yellow-100 text-yellow-800 rounded-full mr-2">
                  자동
                </span>
              ) : data.requestType === "manual" ? (
                <span className="px-1.5 py-0.5 text-xs bg-blue-100 text-blue-800 rounded-full mr-2">
                  수동
                </span>
              ) : null}

              <span className="text-xs bg-gray-100 px-2 py-0.5 rounded-full">
                {data.department || "미지정"}
              </span>
            </div>

            {/* 수량, 단가, 총액을 같은 스타일로 한 줄에 배치 */}
            <div className="flex flex-wrap items-center gap-2 mb-2">
              <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                수량: {data.quantity} {data.measure || "개"}
              </span>
              <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                단가: {data.price ? data.price.toLocaleString() + "원" : "미지정"}
              </span>
              {data.price > 0 && data.quantity > 0 && (
                <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                  총액: {(data.price * data.quantity).toLocaleString()}원
                </span>
              )}
            </div>

            {data.vendor && (
              <div
                className="flex items-center text-sm text-blue-600 mt-2 cursor-pointer hover:text-blue-800"
                onClick={(e) => {
                  e.stopPropagation();
                  handleVendorClick(data.vendor);
                }}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 mr-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
                  />
                </svg>
                <span className="underline">{data.vendor}</span>
              </div>
            )}

            <div className="flex justify-between items-center text-xs text-gray-500 mt-3">
              <div className="flex items-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-3 w-3 mr-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  />
                </svg>
                {data.writer || "Unknown"}
              </div>
              <div>{formatShortDate(data.createdAt)}</div>
            </div>
          </>
        );
        break;
      case "request":
        content = (
          <>
            <div
              className="font-medium text-gray-800 text-base mb-2 border-l-4 border-purple-500 pl-2 truncate"
              title={data.title}
            >
              {data.title || "요청"}
            </div>

            <div
              className="text-sm text-gray-600 mb-2 line-clamp-2"
              title={data.message}
            >
              {data.message}
            </div>

            <div className="flex flex-wrap text-sm mb-2">
              <span className="mr-2 bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                중요도: {data.priority || "중"}
              </span>
              <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                수신자: {data.receiverPeople?.length || 0}명
              </span>
            </div>

            <div className="flex justify-between items-center mt-1 text-xs text-gray-500 pt-1 border-t border-gray-100">
              <div className="flex items-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-3 w-3 mr-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  />
                </svg>
                {data.senderPeople?.[0] ? data.senderPeople[0] : "익명"}
              </div>
              <div>{formatShortDate(data.timestamp)}</div>
            </div>
          </>
        );
        break;
      default:
        content = <div>Unknown item type</div>;
    }

    // 이벤트 핸들러를 래핑하여 이벤트 버블링 제어
    const handleItemClick = (e) => {
      if (isDragging) return; // 드래그 중일 때는 클릭 무시
      e.stopPropagation(); // 이벤트 전파 중단
      if (onItemClick) {
        onItemClick(data);
      }
    };

    return (
      <div
        ref={(node) => {
          setNodeRef(node);
          itemRef.current = node;
        }}
        {...attributes}
        {...listeners}
        style={style}
        className={`bg-white p-3 mb-2 rounded-lg shadow-sm cursor-grab border border-gray-200 hover:shadow-md transition-all relative hover-scale ${
          isBeingHoveredOver
            ? "border-blue-500 border-2 bg-blue-50/20 shadow-md"
            : ""
        }`}
        onClick={handleItemClick}
        data-item-id={id}
        data-item-type={type}
        data-parent-status={data.status}
      >
        {content}

        {/* 아이템 위에 드래그 중일 때 드롭 대상 표시 - 크기 축소 */}
        {isBeingHoveredOver && (
          <div className="absolute inset-0 flex items-center justify-center rounded-lg bg-blue-500/5 border border-blue-300 pointer-events-none z-10"></div>
        )}
      </div>
    );
  };

  // 완전히 새로운 드롭 영역 컴포넌트
  const DropArea = ({ id, title, items, itemType, renderItem, className }) => {
    const containerRef = useRef(null);

    // Droppable 훅 사용
    const { setNodeRef, isOver, active, over } = useDroppable({
      id,
      data: {
        type: "container",
        accepts: itemType,
        id,
        status: id,
      },
    });

    // 관리자 아닐 때는 드래그 불가능하도록 설정 제거

    // 현재 이 영역 위에 마우스가 있는지 여부를 확인하고 UI 업데이트
    useEffect(() => {
      if (!containerRef.current) return;

      if (isOver) {
        // 다른 하이라이트된 요소들 정리
        if (
          currentHighlightedElement &&
          currentHighlightedElement !== containerRef.current
        ) {
          currentHighlightedElement.removeAttribute("data-highlight");
          currentHighlightedElement.classList.remove(
            "ring-2",
            "ring-blue-400",
            "bg-blue-50/20",
            "shadow-md",
            "scale-[1.01]",
            "z-10"
          );
        }

        // 이 요소를 현재 하이라이트된 요소로 설정
        currentHighlightedElement = containerRef.current;
        containerRef.current.setAttribute("data-hovered", "true");
        globalDragState.targetStatus = id;
      } else if (
        containerRef.current.hasAttribute("data-hovered") &&
        currentHighlightedElement !== containerRef.current
      ) {
        containerRef.current.removeAttribute("data-hovered");
      }

      // 하위 아이템에 부모 상태 정보 전달
      const items = containerRef.current.querySelectorAll("[data-item-id]");
      items.forEach((item) => {
        item.setAttribute("data-parent-status", id);
      });
    }, [isOver, id]);

    // 컴포넌트 언마운트 시 정리
    useEffect(() => {
      return () => {
        if (currentHighlightedElement === containerRef.current) {
          currentHighlightedElement = null;
        }
      };
    }, []);

    // 상태에 따라 아이콘 선택
    const getStatusIcon = (status) => {
      switch (status) {
        case "반려됨":
          return (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-red-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clipRule="evenodd"
              />
            </svg>
          );
        case "대기중":
          return (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-yellow-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                clipRule="evenodd"
              />
            </svg>
          );
        case "승인됨":
          return (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-blue-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
          );
        case "장바구니":
          return (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-purple-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
            </svg>
          );
        case "주문완료":
          return (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-green-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M4 3a2 2 0 100 4h12a2 2 0 100-4H4z" />
              <path
                fillRule="evenodd"
                d="M3 8h14v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm5 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"
                clipRule="evenodd"
              />
            </svg>
          );
        default:
          return (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-gray-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5A1 1 0 0110 8h2a2 2 0 012 2v.5a.5.5 0 01-1 0V10a1 1 0 00-1-1h-2a.5.5 0 01-.5-.5 1.5 1.5 0 00-3 0V12a.5.5 0 01-1 0v-1.5a2.5 2.5 0 012.5-2.5h1z"
                clipRule="evenodd"
              />
            </svg>
          );
      }
    };

    // 제목에서 괄호와 항목 수 분리
    const titleParts = title.match(/^(.+) \((\d+)\)$/);
    const statusName = titleParts ? titleParts[1] : title;
    const itemCount = titleParts ? titleParts[2] : "0";

    // 상태에 따른 헤더 배경색 결정
    const getHeaderBgColor = (status) => {
      switch (status) {
        case "반려됨":
          return "bg-red-50";
        case "대기중":
          return "bg-yellow-50";
        case "승인됨":
          return "bg-blue-50";
        case "장바구니":
          return "bg-purple-50";
        case "주문완료":
        case "완료됨":
        case "입고 완료":
          return "bg-green-50";
        default:
          return "bg-white";
      }
    };

    return (
      <div
        ref={(node) => {
          setNodeRef(node);
          containerRef.current = node;
        }}
        className={`h-full flex flex-col rounded-lg p-[2px] ${
          className || "bg-gray-50"
        } ${
          isOver
            ? "ring-2 ring-blue-400 bg-blue-50/20 shadow-md scale-[1.01] z-10"
            : ""
        } transition-all duration-150 overflow-hidden`}
        data-status={id}
        data-type="container"
        data-droppable="true"
        style={{ maxHeight: "520px" }}
      >
        {/* 상단 헤더 부분 */}
        <div
          className={`flex items-center justify-between mb-2 p-2 rounded-lg shadow-sm ${getHeaderBgColor(
            id
          )}`}
        >
          <div className="flex items-center">
            {getStatusIcon(id)}
            <h3 className="font-medium text-gray-700 ml-2">{statusName}</h3>
          </div>
          <span className="bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded-full flex items-center justify-center min-w-[28px]">
            {itemCount}
          </span>
        </div>

        {/* 스크롤 영역 부분 - 스크롤바 숨김 스타일 적용 */}
        <div
          className="flex-1 overflow-y-auto p-1 min-h-[250px] h-[300px] rounded-md scrollbar-hide"
          style={{
            msOverflowStyle: "none",
          }}
        >
          <SortableContext
            items={items.map((item) => item.id)}
            strategy={verticalListSortingStrategy}
          >
            {items.length > 0 ? (
              <div className="px-1 pb-2">
                {items.map((item) => renderItem({ ...item, status: id }))}
              </div>
            ) : (
              <div className="flex items-center justify-center h-full">
                <p className="text-gray-400 text-sm italic">항목 없음</p>
              </div>
            )}
          </SortableContext>
        </div>
      </div>
    );
  };

  // ... [rest of the code remains unchanged]