import React, { useState, useEffect } from "react";
import { Routes, Route } from "react-router-dom";
// Import the functions you need from the SDKs you need
import Home from "./pages/Home";
import Contact from "./pages/Contact";
import Notice from "./pages/Notice";
import Education from "./pages/Education";
import Warehouse from "./pages/Warehouse";
import Call from "./pages/Call";
import Write from "./pages/Write";
import Task from "./pages/Task";
import Schedule from "./pages/Schedule";
import Vacation from "./pages/Vacation";
import {
  collection,
  addDoc,
  onSnapshot,
  query,
  where,
  orderBy,
  limit,
} from "firebase/firestore";
import { db } from "./firebase";
import { notification, NOTIFICATION_BASE64 } from "./assets/sound";
// Toast Provider Ï∂îÍ∞Ä
import { ToastProvider } from "./contexts/ToastContext";
import { useUserLevel } from "./utils/UserLevelContext";
import Parking from "./pages/Parking";
import { initializeChatRooms } from "./components/Chat/ChatService";
// Ïã†Ï≤≠ ÌòÑÌô© ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
import Requests from "./pages/Requests";
// AudioContext Ï∂îÍ∞Ä
import { AudioProvider, useAudio } from "./contexts/AudioContext";
// TODO: Add SDKs for Firebase products that you want to use

// Ïï± ÏãúÏûë ÏãúÍ∞Ñ Í∏∞Î°ù (Ï≤òÏùå Ïã§Ìñâ Ïãú Ïù¥Ï†Ñ Î©îÏãúÏßÄ ÏïåÎ¶º Î∞©ÏßÄÏö©)
const APP_START_TIME = Date.now();
console.log("Ïï± ÏãúÏûë ÏãúÍ∞Ñ:", new Date(APP_START_TIME).toLocaleTimeString());

// Ï≤òÎ¶¨Îêú ÏïåÎ¶º Î©îÏãúÏßÄ IDÎ•º Ï∂îÏ†ÅÌïòÍ∏∞ ÏúÑÌïú Set
const processedNotifications = new Set();

const AppContent = () => {
  const { userLevelData } = useUserLevel();
  const { playNotificationSound } = useAudio();

  // Î™®Îì† ÎØ∏ÎîîÏñ¥ ÏöîÏÜåÏóê ÎåÄÌïú Ï†ÑÏó≠ Î≥ºÎ•® ÏÑ§Ï†ï
  useEffect(() => {
    // HTML Media Element Í∏∞Î≥∏ Î≥ºÎ•® Ï†ïÏ±Ö ÏÑ§Ï†ï
    // Ïù¥Îäî ÏÉàÎ°ú ÏÉùÏÑ±ÎêòÎäî Î™®Îì† Audio Í∞ùÏ≤¥Ïùò Í∏∞Î≥∏ Î≥ºÎ•®Ïóê ÏòÅÌñ•ÏùÑ Ï§çÎãàÎã§
    try {
      const mediaElements = document.querySelectorAll('audio, video');
      mediaElements.forEach(element => {
        // Î≥ºÎ•® ÏÜçÏÑ±ÏùÑ ÏßÅÏ†ë Ï°∞Ïûë
        element.defaultMuted = false;
        
        // Î™®Îì† Ïò§ÎîîÏò§ ÏöîÏÜåÏóê Î≥ºÎ•® Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
        element.addEventListener('volumechange', (e) => {
          console.log('ÎØ∏ÎîîÏñ¥ ÏöîÏÜå Î≥ºÎ•® Î≥ÄÍ≤ΩÎê®:', e.target.volume);
        });
      });
      
      console.log('ÎØ∏ÎîîÏñ¥ ÏöîÏÜå Í∏∞Î≥∏ ÏÑ§Ï†ï Ï†ÅÏö© ÏôÑÎ£å');
    } catch (error) {
      console.error('ÎØ∏ÎîîÏñ¥ ÏöîÏÜå ÏÑ§Ï†ï Ïò§Î•ò:', error);
    }
  }, []);

  useEffect(() => {
    if (
      !userLevelData ||
      (!userLevelData.location && !userLevelData.department)
    )
      return;

    console.log(
      "Ìò∏Ï∂ú Î¶¨Ïä§ÎÑà ÏÑ§Ï†ïÎê®, ÏúÑÏπò:",
      userLevelData.location,
      "Î∂ÄÏÑú:",
      userLevelData.department
    );

    // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò locationÏù¥ÎÇò departmentÎ•º ÎåÄÏÉÅÏúºÎ°ú ÌïòÎäî Ìò∏Ï∂ú ÌïÑÌÑ∞ÎßÅ
    const q = query(
      collection(db, "calls"),
      where("receiverId", "in", [
        userLevelData.location,
        userLevelData.department,
      ]),
      orderBy("createdAt", "desc"),
      limit(20)
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      console.log("Ìò∏Ï∂ú Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Í∞êÏßÄ:", snapshot.docChanges().length);

      snapshot.docChanges().forEach((change) => {
        if (change.type === "added") {
          const data = change.doc.data();
          const docId = change.doc.id;

          // Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú ÏïåÎ¶ºÏù∏ÏßÄ ÌôïÏù∏ (Ï§ëÎ≥µ Î∞©ÏßÄ)
          if (processedNotifications.has(docId)) {
            console.log("Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú ÏïåÎ¶º:", docId);
            return;
          }

          // Ï≤òÎ¶¨Îêú ÏïåÎ¶ºÏúºÎ°ú ÌëúÏãú
          processedNotifications.add(docId);

          console.log("ÏÉàÎ°úÏö¥ Ìò∏Ï∂ú Îç∞Ïù¥ÌÑ∞:", data);

          // Î©îÏãúÏßÄ ÏãúÍ∞Ñ ÌôïÏù∏
          const currentTime = Date.now();
          const messageTime = data.createdAt;
          const timeSinceAppStart = Math.floor(
            (messageTime - APP_START_TIME) / 1000
          );

          console.log("ÌòÑÏû¨ ÏãúÍ∞Ñ:", new Date(currentTime).toLocaleTimeString());
          console.log(
            "Î©îÏãúÏßÄ ÏãúÍ∞Ñ:",
            new Date(messageTime).toLocaleTimeString()
          );
          console.log("Ïï± ÏãúÏûë ÌõÑ Í≤ΩÍ≥º ÏãúÍ∞Ñ(Ï¥à):", timeSinceAppStart);

          // Ïï± ÏãúÏûë Ïù¥ÌõÑÏóê ÏÉùÏÑ±Îêú Î©îÏãúÏßÄÎßå ÏïåÎ¶º ÌëúÏãú (ÏùåÏàòÎ©¥ Ïï± ÏãúÏûë Ï†Ñ Î©îÏãúÏßÄ)
          if (messageTime > APP_START_TIME) {
            console.log(
              "Ïï± ÏãúÏûë Ïù¥ÌõÑ Î©îÏãúÏßÄ - ÏïåÎ¶ºÏùå Ïû¨ÏÉù Î∞è ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º ÌëúÏãú"
            );

            // ÎîîÎ≤ÑÍπÖ: electron API ÌôïÏù∏
            console.log("window.electron ÌôïÏù∏:", window.electron);
            console.log(
              "sendNotification Ìï®Ïàò ÌôïÏù∏:",
              window.electron?.sendNotification
            );

            // ÏïåÎ¶ºÏùå Ïû¨ÏÉù - Ïù¥Ï†ÑÏóê ÏûëÎèôÌïòÎçò Î∞©ÏãùÏúºÎ°ú Î≥µÏõê
            try {
              // Î®ºÏ†Ä notification Í∞ùÏ≤¥ ÏÇ¨Ïö©
              playNotificationSound(notification);
              console.log("notification Í∞ùÏ≤¥Î°ú ÏïåÎ¶ºÏùå Ïû¨ÏÉù ÏãúÎèÑ");
              
              // Î∞±ÏóÖÏúºÎ°ú Base64 Îç∞Ïù¥ÌÑ∞ ÏãúÎèÑ
              setTimeout(() => {
                console.log("Î∞±ÏóÖ: Base64 Îç∞Ïù¥ÌÑ∞Î°ú ÏïåÎ¶ºÏùå Ïû¨ÏÉù ÏãúÎèÑ");
                playNotificationSound(NOTIFICATION_BASE64);
              }, 300);
            } catch (error) {
              console.error("ÏïåÎ¶ºÏùå Ïû¨ÏÉù Ïò§Î•ò:", error);
            }

            if (window.electron && window.electron.sendNotification) {
              // Ìò∏Ï∂ú ÌÉÄÏûÖÏóê Îî∞Î•∏ Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
              const callType = data.type || "Ìò∏Ï∂ú";
              let typePrefix = "";

              switch (callType) {
                case "ÏòàÏïΩ":
                  typePrefix = "üìÖ ";
                  break;
                case "Ìò∏Ï∂ú":
                  typePrefix = "üîî ";
                  break;
                case "Ï±ÑÌåÖ":
                  typePrefix = "üí¨ ";
                  break;
                case "ÏãúÏä§ÌÖú":
                  typePrefix = "üîß ";
                  break;
                default:
                  typePrefix = "üîî ";
                  break;
              }

              const notificationMsg = `${typePrefix}${data.senderId}: ${data.message}`;
              console.log("ÏïåÎ¶º Î©îÏãúÏßÄ:", notificationMsg);
              try {
                window.electron.sendNotification(notificationMsg);
                console.log("sendNotification Ìï®Ïàò Ìò∏Ï∂ú ÏôÑÎ£å");
              } catch (error) {
                console.error("sendNotification Ìò∏Ï∂ú Ïã§Ìå®:", error);
              }
            } else {
              console.error("ÏïåÎ¶º Í∏∞Îä•ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå: ", window.electron);
            }
          } else {
            console.log("Ïï± ÏãúÏûë Ï†Ñ Î©îÏãúÏßÄ - ÏïåÎ¶º ÌëúÏãúÎêòÏßÄ ÏïäÏùå");
          }
        }
      });
    });

    return () => unsubscribe();
  }, [userLevelData, playNotificationSound]);

  // Firebase Ï±ÑÌåÖÎ∞© Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    const initializeChat = async () => {
      try {
        await initializeChatRooms();
      } catch (error) {
        console.error("Ï±ÑÌåÖÎ∞© Ï¥àÍ∏∞Ìôî Ïò§Î•ò:", error);
      }
    };

    initializeChat();
  }, []);

  // ÏïåÎ¶ºÏùå ÌÖåÏä§Ìä∏ Ìï®Ïàò (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå ÏÇ¨Ïö©)
  const testNotificationSound = () => {
    console.log("ÏïåÎ¶ºÏùå ÌÖåÏä§Ìä∏ ÏãúÏûë");
    
    // ÏßÅÏ†ë Ïû¨ÏÉù Î∞©ÏãùÏúºÎ°ú Î≥ÄÍ≤Ω
    try {
      // Îã§ÏñëÌïú Î∞©Î≤ï ÏãúÎèÑ
      console.log("1. notification Í∞ùÏ≤¥Î°ú Ïû¨ÏÉù ÏãúÎèÑ");
      playNotificationSound(notification);
      
      // 300ms ÌõÑÏóê Î∞±ÏóÖ Î∞©Ïãù ÏãúÎèÑ
      setTimeout(() => {
        console.log("2. Base64 Îç∞Ïù¥ÌÑ∞Î°ú Ïû¨ÏÉù ÏãúÎèÑ");
        playNotificationSound(NOTIFICATION_BASE64);
      }, 300);
    } catch (error) {
      console.error("ÏïåÎ¶ºÏùå ÌÖåÏä§Ìä∏ Ïò§Î•ò:", error);
    }
  };
  
  // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§Î•º ÌÜµÌïú ÏïåÎ¶ºÏùå ÌÖåÏä§Ìä∏
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Ctrl+Shift+TÎ•º ÎàÑÎ•¥Î©¥ ÏïåÎ¶ºÏùå ÌÖåÏä§Ìä∏
      if (e.ctrlKey && e.shiftKey && e.key === 'T') {
        testNotificationSound();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [playNotificationSound]);

  return (
    <div className="bg-primary w-full overflow-hidden bg-onceBackground">
      {/* Ìó§ÎçîÎ∂ÄÎ∂Ñ */}
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/Notice" element={<Notice />} />
        <Route path="/Education" element={<Education />} />
        <Route path="/Warehouse" element={<Warehouse />} />
        <Route path="/write" element={<Write />} />
        <Route path="/Call" element={<Call />} />
        <Route path="/contact" element={<Contact />} />
        <Route path="/task" element={<Task />} />
        <Route path="/schedule" element={<Schedule />} />
        <Route path="/parking" element={<Parking />} />
        <Route path="/requests" element={<Requests />} />
      </Routes>
      {/* <ChatBot /> */}
    </div>
  );
};

const App = () => {
  return (
    <AudioProvider>
      <ToastProvider>
        <AppContent />
      </ToastProvider>
    </AudioProvider>
  );
};

export default App;
